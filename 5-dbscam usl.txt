 DBSCAN : Density-based spatial clustering of applications with noise.

=> import 
>> form sklearn.cluster import DBSCAN
>> model = DBSCAN()
>> DBSCAN( eps, min_samples )   
// eps is for epsilon value (default value = 0.5)
// min_samples is for Min. Number of points  (default value = 5)
// both are keyword arguments

=> hyperparameters
>> DBSCAN( eps, min_samples )
// eps is for epsilon value (default value = 0.5)
// min_samples is for Min. Number of points  (default value = 5)
// both are keyword arguments


1. Epsilon : distance extended from  a point to search for Min. Number of points.
2. Min. Number of Points : Min. Number of points within Epsilon distance to consider a point as core point.

* adjusting these hyperparameters have two main outcomes :
1. changing number of clusters.
2. changing what is an outlier.

** EPSILON
3. Increasing epsilon allows more points to be core points which also results in more border points and less outlier points.
4. Decreasing epsilon causes more points (not) to be in range of each other, creating more unique clusters. (a tiny epsilon, the range would not extend far out enough to come into contact with any other points.)
5. Imagine a huge epsilon, all points would be within the neighborhood and classified as the same cluster.
6. In 2d think of epsilon as radius and neighborhood is the circle with that epsilon and in that circle we find the points to make that point a core points.

** Minimum Number of Samples/Points
7. Number of samples in a neighborhood for a point to be considered as a core point (including point itself)
8. Increasing to a larger number of samples needed to be considered a core point, causes more points to be considered unique outliers.
9. If min. number of samples was close to total numbers of points available, then very likely all points would become outliers.
10. Useful to decrease to create potential new small clusters, instead of complete outliers (epsilon tuning is also needed).


=> Tuning hyperparameters
1. epsilon
run multiple DBSCAN models varying epsilon and measure
Number of clusters
Number of outliers
Percentage of outliers ((outliers / total points) *100))
** the value of epsilon extremely dependent on the particular data set and domain space.
** require user to have some expectation or intuition about number of clusters and relative percentage of outliers.

2. Min. Number of Samples
Test multiple potential values and chart against number of outliers labeled.


=> checking hyperparameters
1. epsilon
plot 'elbow/knee' diagram (elbow method) comparing epsilon values against number of outliers or percentage of outliers
Y - number or percentage of outliers
X - epsilon values 

2. Min. Number of Samples 
Test multiple potential values and chart against number of outliers labeled
Y - Percentage or number of points classified as outliers
X - Minimum Number of Samples

